//796. Rotate String

class Solution {
    public boolean rotateString(String s, String goal) {
        if (s.length() != goal.length()) {
            return false;
        }
        return (s + s).contains(goal);
    }
}


//28. Find the Index of the First Occurrence in a String
class Solution {
    public int strStr(String haystack, String needle) {
        if(!haystack.contains(needle)){
            return -1;
        }
        for(int i = 0; i<=haystack.length() - needle.length();i++){
            if(haystack.substring(i,i+needle.length()).equals(needle)){
                return i;
            }
        }
        return -1;
    }
}


//   1023. Camelcase Matching
class Solution {
    public List<Boolean> camelMatch(String[] queries, String pattern) {
        char[] pat = pattern.toCharArray();
        List<Boolean> list = new ArrayList<>();
        
        for(String s : queries){
            char[] c = s.toCharArray();
			// pattern index
            int x = 0;
			// flag -> query matches pattern or not
			// extra -> pattern limit reached or not
            boolean flag = true, extra = false;
            for(int i = 0; i<c.length; i++){
				// if limit reached or not matched
                if(extra || c[i]!=pat[x]){
					// if query capital then false
                    if(c[i]>=65 && c[i]<=90){
                        flag = false;
                        break;
                    }
                }
				// if match increase pattern index and check if limit reached
				else{
                    x++;
                    extra = x>=pat.length;
                }
            }
			// check flag is true and pattern limit reached (pattern ends) 
            flag = flag && x==pat.length;
            list.add(flag);
        }
        
        return list;
    }
}


// 686. Repeated String Match

class Solution {
    public int repeatedStringMatch(String a, String b) {
        StringBuilder s = new StringBuilder(a);
        int count=1;
        while(s.length()<b.length()){
            count++;
            s.append(a);
        }
        
        if(searchByRabin(s.toString(),b)) return count;
        s.append(a);
        if(searchByRabin(s.toString(),b)) return count+1;
        return -1;
    }
    
    private boolean searchByRabin(String s, String pat){
        int p=0,t=0;
        int q=101;
        int h=1;
        int d=256;
        int m=pat.length(),n=s.length();
        for(int i=0;i<m-1;i++) h = (h*d)%q;
        for(int i=0;i<m;i++){
            p = (d*p+pat.charAt(i))%q;
            t = (d*t+s.charAt(i))%q;
        }
        for(int i=0;i<=n-m;i++){
            if(p==t){
                boolean match = true;
                for(int j=0;j<m;j++){
                    if(pat.charAt(j)!=s.charAt(i+j)) {
                        match = false;
                        break;
                    }
                    if(match) return true;
                }
            }
            if(i<n-m){
                t = (d*(t-h*s.charAt(i))+s.charAt(i+m))%q;
                if(t<0) t += q;
            }
        }
        return false;
    }
}
