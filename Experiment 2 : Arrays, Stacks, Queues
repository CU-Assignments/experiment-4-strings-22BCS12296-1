//1. Two Sum

class Solution {
    public int[] twoSum(int[] nums, int target) {
        ArrayList<Integer> list = new ArrayList<>();
        for(int i = 0; i<nums.length;i++){
            for(int j = i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){

                    return new int[]{i,j};

                }
            }
        }
        return new int[]{};
    }
}


// 45. Jump Game II

class Solution {
    public int jump(int[] nums) {
        if (nums.length <= 1) {
            return 0;
        }

        int jumps = 0;
        int currentEnd = 0;
        int farthest = 0;

        for (int i = 0; i < nums.length - 1; i++) {
            farthest = Math.max(farthest, i + nums[i]);

            if (i == currentEnd) {
                jumps++;
                currentEnd = farthest;

                if (currentEnd >= nums.length - 1) {
                    break;
                }
            }
        }

        return jumps;
    }
}


71. Simplify Path

class Solution {
    public String simplifyPath(String path) {
        Stack<String> stack = new Stack<>(); // Initialize the stack

        String[] p = path.split("/"); // Split the path into components

        for (int i = 0; i < p.length; i++) { // Iterate through the components
            if (p[i].equals("..")) { // Check if the component is ".."
                if (!stack.isEmpty()) {
                    stack.pop(); // Pop the top element if stack is not empty
                }
            } else if (!p[i].equals("") && !p[i].equals(".")) { // Check if the component is not empty and not "."
                stack.push(p[i]); // Push the component onto the stack
            }
        }

        StringBuilder res = new StringBuilder(); // Initialize the StringBuilder

        while (!stack.isEmpty()) {
            res.insert(0, stack.pop()).insert(0, "/"); // Insert each element at the beginning
        }

       if (res.length() == 0) {
    return "/";
} else {
    return res.toString();
}

    }
}


